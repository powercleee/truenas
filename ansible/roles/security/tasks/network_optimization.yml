---
# Network Performance Optimization
# Uses only TrueNAS middleware API - no direct system commands

- name: Get existing TrueNAS tunables
  uri:
    url: "{{ truenas_api_url }}/tunable"
    method: GET
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
    validate_certs: "{{ truenas_validate_certs }}"
  register: existing_tunables
  tags:
    - security
    - network
    - optimization
    - api

- name: Display existing network-related tunables
  debug:
    msg: "Found {{ existing_tunables.json | selectattr('var', 'match', 'net\\..*') | list | length }} existing network tunables"
  tags:
    - security
    - network
    - optimization
    - debug

- name: Remove conflicting or outdated network tunables
  uri:
    url: "{{ truenas_api_url }}/tunable/id/{{ item.id }}"
    method: DELETE
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
    status_code: [200, 404]  # 404 if already deleted
    validate_certs: "{{ truenas_validate_certs }}"
  loop: "{{ existing_tunables.json | selectattr('var', 'in', tcp_tuning_variables.keys()) | list }}"
  when:
    - apply_tcp_tuning | default(true)
    - cleanup_existing_tunables | default(false)
  ignore_errors: true
  tags:
    - security
    - network
    - optimization
    - cleanup
    - api

- name: Create TCP tuning tunables via TrueNAS API
  uri:
    url: "{{ truenas_api_url }}/tunable"
    method: POST
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      var: "{{ item.key }}"
      value: "{{ item.value }}"
      type: "SYSCTL"
      comment: "TCP optimization for mixed-speed networks (1GbE+10GbE) - managed by Ansible"
      enabled: true
    status_code: [200, 409]  # 409 = already exists
    validate_certs: "{{ truenas_validate_certs }}"
  loop: "{{ tcp_tuning_variables | dict2items }}"
  when:
    - apply_tcp_tuning | default(true)
    - item.key not in (existing_tunables.json | selectattr('var', 'defined') | map(attribute='var') | list)
  register: tunable_creation_results
  tags:
    - security
    - network
    - optimization
    - api

- name: Update existing TCP tuning tunables if values differ
  uri:
    url: "{{ truenas_api_url }}/tunable/id/{{ existing_tunable.id }}"
    method: PUT
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      var: "{{ item.key }}"
      value: "{{ item.value }}"
      type: "SYSCTL"
      comment: "TCP optimization for mixed-speed networks (1GbE+10GbE) - managed by Ansible (updated)"
      enabled: true
    status_code: [200]
    validate_certs: "{{ truenas_validate_certs }}"
  loop: "{{ tcp_tuning_variables | dict2items }}"
  vars:
    existing_tunable: "{{ existing_tunables.json | selectattr('var', 'equalto', item.key) | first | default({}) }}"
  when:
    - apply_tcp_tuning | default(true)
    - existing_tunable.id is defined
    - existing_tunable.value != item.value or not existing_tunable.enabled
  register: tunable_update_results
  tags:
    - security
    - network
    - optimization
    - api

- name: Apply tunables immediately (reload sysctl)
  uri:
    url: "{{ truenas_api_url }}/tunable/load"
    method: POST
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body: {}
    status_code: [200]
    validate_certs: "{{ truenas_validate_certs }}"
  when:
    - apply_tcp_tuning | default(true)
    - (tunable_creation_results is changed) or (tunable_update_results is changed)
  tags:
    - security
    - network
    - optimization
    - api

- name: Verify TCP tuning settings are active (API verification only)
  uri:
    url: "{{ truenas_api_url }}/tunable"
    method: GET
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
    validate_certs: "{{ truenas_validate_certs }}"
  register: final_tunables
  tags:
    - security
    - network
    - optimization
    - verification

- name: Display TCP tuning verification results
  debug:
    msg:
      - "Network tunables configured via TrueNAS API:"
      - "{{ final_tunables.json | selectattr('var', 'match', 'net\\..*') | map(attribute='var') | list | join(', ') }}"
      - ""
      - "View/Edit: System → Advanced → Sysctl in TrueNAS Web UI"
  tags:
    - security
    - network
    - optimization
    - verification

- name: Display network optimization summary
  debug:
    msg:
      - "TrueNAS API Network Optimization Applied:"
      - "TCP Tunables Created: {{ (tunable_creation_results.results | default([]) | selectattr('changed', 'equalto', true) | list | length) }}"
      - "TCP Tunables Updated: {{ (tunable_update_results.results | default([]) | selectattr('changed', 'equalto', true) | list | length) }}"
      - "Total Network Tunables: {{ final_tunables.json | selectattr('var', 'match', 'net\\..*') | list | length }}"
      - ""
      - "✅ All settings managed through TrueNAS middleware API"
      - "✅ Settings visible in System → Advanced → Sysctl"
      - "✅ Persistent across reboots and updates"
      - "✅ Included in TrueNAS configuration backups"
      - ""
      - "Management:"
      - "- View/Edit in Web UI: System → Advanced → Sysctl"
      - "- API Endpoint: {{ truenas_api_url }}/tunable"
      - "- Filter: search for 'net.' in the Web UI"
      - ""
      - "Note: NIC offloading features are not available via TrueNAS API"
      - "      These require direct ethtool commands and are not included"
  tags:
    - security
    - network
    - optimization
    - summary