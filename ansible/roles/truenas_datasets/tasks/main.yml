---
- name: Create main datasets via TrueNAS API
  uri:
    url: "{{ truenas_api_url }}/pool/dataset"
    method: POST
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ item.name }}"
      type: "FILESYSTEM"
    status_code: [200, 409]  # 409 = already exists
    validate_certs: "{{ truenas_validate_certs }}"
  loop: "{{ main_datasets }}"
  register: main_dataset_results
  tags:
    - datasets
    - main_datasets
    - api

- name: Set properties for main datasets via TrueNAS API
  uri:
    url: "{{ truenas_api_url }}/pool/dataset/id/{{ item.name | replace('/', '%2F') }}"
    method: PUT
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      properties:
        recordsize: "{{ item.recordsize }}"
        compression: "{{ item.compression | default(default_compression) }}"
        atime: "{{ default_atime }}"
        xattr: "{{ default_xattr }}"
    status_code: [200]
    validate_certs: "{{ truenas_validate_certs }}"
  loop: "{{ main_datasets }}"
  register: main_dataset_properties_results
  tags:
    - datasets
    - main_datasets
    - properties
    - api

- name: Create container runtime datasets via TrueNAS API
  uri:
    url: "{{ truenas_api_url }}/pool/dataset"
    method: POST
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ item.name }}"
      type: "FILESYSTEM"
    status_code: [200, 409]  # 409 = already exists
    validate_certs: "{{ truenas_validate_certs }}"
  loop: "{{ container_datasets }}"
  register: container_dataset_results
  tags:
    - datasets
    - container_datasets
    - api

- name: Set properties for container datasets via TrueNAS API
  uri:
    url: "{{ truenas_api_url }}/pool/dataset/id/{{ item.name | replace('/', '%2F') }}"
    method: PUT
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      properties:
        recordsize: "128K"
        compression: "{{ default_compression }}"
        atime: "{{ default_atime }}"
        xattr: "{{ default_xattr }}"
    status_code: [200]
    validate_certs: "{{ truenas_validate_certs }}"
  loop: "{{ container_datasets }}"
  register: container_dataset_properties_results
  tags:
    - datasets
    - container_datasets
    - properties
    - api

- name: Create application datasets via TrueNAS API
  uri:
    url: "{{ truenas_api_url }}/pool/dataset"
    method: POST
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ zfs_pool }}/apps/{{ item.1 }}"
      type: "FILESYSTEM"
    status_code: [200, 409]  # 409 = already exists
    validate_certs: "{{ truenas_validate_certs }}"
  loop: "{{ app_categories | dict2items | subelements('value') }}"
  register: app_dataset_results
  tags:
    - datasets
    - app_datasets
    - api

- name: Set properties for application datasets via TrueNAS API
  uri:
    url: "{{ truenas_api_url }}/pool/dataset/id/{{ (zfs_pool + '/apps/' + item.1) | replace('/', '%2F') }}"
    method: PUT
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      properties:
        recordsize: "128K"
        compression: "{{ default_compression }}"
        atime: "{{ default_atime }}"
        xattr: "{{ default_xattr }}"
    status_code: [200]
    validate_certs: "{{ truenas_validate_certs }}"
  loop: "{{ app_categories | dict2items | subelements('value') }}"
  register: app_dataset_properties_results
  tags:
    - datasets
    - app_datasets
    - properties
    - api

- name: Create media subdatasets via TrueNAS API
  uri:
    url: "{{ truenas_api_url }}/pool/dataset"
    method: POST
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ item.name }}"
      type: "FILESYSTEM"
    status_code: [200, 409]  # 409 = already exists
    validate_certs: "{{ truenas_validate_certs }}"
  loop: "{{ media_subdatasets }}"
  register: media_dataset_results
  tags:
    - datasets
    - media_datasets
    - api

- name: Set properties for media datasets via TrueNAS API
  uri:
    url: "{{ truenas_api_url }}/pool/dataset/id/{{ item.name | replace('/', '%2F') }}"
    method: PUT
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      properties:
        recordsize: "1M"
        compression: "off"
        atime: "{{ default_atime }}"
        xattr: "{{ default_xattr }}"
    status_code: [200]
    validate_certs: "{{ truenas_validate_certs }}"
  loop: "{{ media_subdatasets }}"
  register: media_dataset_properties_results
  tags:
    - datasets
    - media_datasets
    - properties
    - api

- name: Create download subdatasets via TrueNAS API
  uri:
    url: "{{ truenas_api_url }}/pool/dataset"
    method: POST
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ item.name }}"
      type: "FILESYSTEM"
    status_code: [200, 409]  # 409 = already exists
    validate_certs: "{{ truenas_validate_certs }}"
  loop: "{{ download_subdatasets }}"
  register: download_dataset_results
  tags:
    - datasets
    - download_datasets
    - api

- name: Set properties for download datasets via TrueNAS API
  uri:
    url: "{{ truenas_api_url }}/pool/dataset/id/{{ item.name | replace('/', '%2F') }}"
    method: PUT
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      properties:
        recordsize: "128K"
        compression: "{{ default_compression }}"
        atime: "{{ default_atime }}"
        xattr: "{{ default_xattr }}"
    status_code: [200]
    validate_certs: "{{ truenas_validate_certs }}"
  loop: "{{ download_subdatasets }}"
  register: download_dataset_properties_results
  tags:
    - datasets
    - download_datasets
    - properties
    - api

- name: Create database datasets via TrueNAS API
  uri:
    url: "{{ truenas_api_url }}/pool/dataset"
    method: POST
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ item.name }}"
      type: "FILESYSTEM"
    status_code: [200, 409]  # 409 = already exists
    validate_certs: "{{ truenas_validate_certs }}"
  loop: "{{ database_datasets }}"
  register: database_dataset_results
  tags:
    - datasets
    - database_datasets
    - api

- name: Set properties for database datasets via TrueNAS API
  uri:
    url: "{{ truenas_api_url }}/pool/dataset/id/{{ item.name | replace('/', '%2F') }}"
    method: PUT
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      properties:
        recordsize: "16K"
        compression: "{{ default_compression }}"
        atime: "{{ default_atime }}"
        xattr: "{{ default_xattr }}"
    status_code: [200]
    validate_certs: "{{ truenas_validate_certs }}"
  loop: "{{ database_datasets }}"
  register: database_dataset_properties_results
  tags:
    - datasets
    - database_datasets
    - properties
    - api

- name: Create backup subdatasets via TrueNAS API
  uri:
    url: "{{ truenas_api_url }}/pool/dataset"
    method: POST
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ item.name }}"
      type: "FILESYSTEM"
    status_code: [200, 409]  # 409 = already exists
    validate_certs: "{{ truenas_validate_certs }}"
  loop: "{{ backup_subdatasets }}"
  register: backup_dataset_results
  tags:
    - datasets
    - backup_datasets
    - api

- name: Set properties for backup datasets via TrueNAS API
  uri:
    url: "{{ truenas_api_url }}/pool/dataset/id/{{ item.name | replace('/', '%2F') }}"
    method: PUT
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      properties:
        recordsize: "1M"
        compression: "{{ default_compression }}"
        atime: "{{ default_atime }}"
        xattr: "{{ default_xattr }}"
    status_code: [200]
    validate_certs: "{{ truenas_validate_certs }}"
  loop: "{{ backup_subdatasets }}"
  register: backup_dataset_properties_results
  tags:
    - datasets
    - backup_datasets
    - properties
    - api

- name: Create log datasets for all services via TrueNAS API
  uri:
    url: "{{ truenas_api_url }}/pool/dataset"
    method: POST
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ zfs_pool }}/logs/{{ item }}"
      type: "FILESYSTEM"
    status_code: [200, 409]  # 409 = already exists
    validate_certs: "{{ truenas_validate_certs }}"
  loop: "{{ all_services + system_logs }}"
  register: log_dataset_results
  tags:
    - datasets
    - log_datasets
    - api

- name: Set properties for log datasets via TrueNAS API
  uri:
    url: "{{ truenas_api_url }}/pool/dataset/id/{{ (zfs_pool + '/logs/' + item) | replace('/', '%2F') }}"
    method: PUT
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      properties:
        recordsize: "128K"
        compression: "{{ default_compression }}"
        atime: "{{ default_atime }}"
        xattr: "{{ default_xattr }}"
    status_code: [200]
    validate_certs: "{{ truenas_validate_certs }}"
  loop: "{{ all_services + system_logs }}"
  register: log_dataset_properties_results
  tags:
    - datasets
    - log_datasets
    - properties
    - api

- name: Create system datasets via TrueNAS API
  uri:
    url: "{{ truenas_api_url }}/pool/dataset"
    method: POST
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      name: "{{ item.name }}"
      type: "FILESYSTEM"
    status_code: [200, 409]  # 409 = already exists
    validate_certs: "{{ truenas_validate_certs }}"
  loop: "{{ system_datasets }}"
  register: system_dataset_results
  tags:
    - datasets
    - system_datasets
    - api

- name: Set properties for system datasets via TrueNAS API
  uri:
    url: "{{ truenas_api_url }}/pool/dataset/id/{{ item.name | replace('/', '%2F') }}"
    method: PUT
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      properties:
        recordsize: "128K"
        compression: "{{ default_compression }}"
        atime: "{{ default_atime }}"
        xattr: "{{ default_xattr }}"
    status_code: [200]
    validate_certs: "{{ truenas_validate_certs }}"
  loop: "{{ system_datasets }}"
  register: system_dataset_properties_results
  tags:
    - datasets
    - system_datasets
    - properties
    - api

- name: Apply special recordsize adjustments via TrueNAS API
  uri:
    url: "{{ truenas_api_url }}/pool/dataset/id/{{ item.dataset | replace('/', '%2F') }}"
    method: PUT
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      properties:
        recordsize: "{{ item.recordsize }}"
    status_code: [200]
    validate_certs: "{{ truenas_validate_certs }}"
  loop: "{{ special_recordsizes }}"
  register: special_recordsize_results
  tags:
    - datasets
    - special_adjustments
    - api

- name: Set permissions for application directories via TrueNAS API
  uri:
    url: "{{ truenas_api_url }}/filesystem/setperm"
    method: POST
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      path: "/mnt/{{ zfs_pool }}/apps/{{ item.1 }}"
      mode: "755"
      user: "{{ item.1 }}"
      group: "{{ item.0.key }}"
      options:
        stripacl: true
        recursive: false
    status_code: [200]
    validate_certs: "{{ truenas_validate_certs }}"
  loop: "{{ app_categories | dict2items | subelements('value') }}"
  register: app_permission_results
  tags:
    - datasets
    - permissions
    - post_users
    - api

- name: Set permissions for database directories via TrueNAS API
  uri:
    url: "{{ truenas_api_url }}/filesystem/setperm"
    method: POST
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      path: "{{ item.name | replace(zfs_pool, '/mnt/' + zfs_pool) }}"
      mode: "700"
      user: "{{ item.owner }}"
      group: "{{ item.group }}"
      options:
        stripacl: true
        recursive: false
    status_code: [200]
    validate_certs: "{{ truenas_validate_certs }}"
  loop: "{{ database_datasets }}"
  when: item.owner is defined and item.group is defined
  register: database_permission_results
  tags:
    - datasets
    - permissions
    - database_permissions
    - api

- name: Set permissions for media directories via TrueNAS API
  uri:
    url: "{{ truenas_api_url }}/filesystem/setperm"
    method: POST
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      path: "{{ item.name | replace(zfs_pool, '/mnt/' + zfs_pool) }}"
      mode: "775"
      user: "plex"
      group: "media"
      options:
        stripacl: true
        recursive: false
    status_code: [200]
    validate_certs: "{{ truenas_validate_certs }}"
  loop: "{{ media_subdatasets }}"
  register: media_permission_results
  tags:
    - datasets
    - permissions
    - media_permissions
    - api

- name: Set permissions for download directories via TrueNAS API
  uri:
    url: "{{ truenas_api_url }}/filesystem/setperm"
    method: POST
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      path: "{{ item.name | replace(zfs_pool, '/mnt/' + zfs_pool) }}"
      mode: "775"
      user: "qbittorrent"
      group: "download"
      options:
        stripacl: true
        recursive: false
    status_code: [200]
    validate_certs: "{{ truenas_validate_certs }}"
  loop: "{{ download_subdatasets }}"
  register: download_permission_results
  tags:
    - datasets
    - permissions
    - download_permissions
    - api

- name: Set permissions for log directories via TrueNAS API
  uri:
    url: "{{ truenas_api_url }}/filesystem/setperm"
    method: POST
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      path: "/mnt/{{ zfs_pool }}/logs/{{ item }}"
      mode: "755"
      user: "{{ item }}"
      group: "monitor"
      options:
        stripacl: true
        recursive: false
    status_code: [200]
    validate_certs: "{{ truenas_validate_certs }}"
  loop: "{{ all_services }}"
  register: log_permission_results
  tags:
    - datasets
    - permissions
    - log_permissions
    - api

- name: Set permissions for system log directories via TrueNAS API
  uri:
    url: "{{ truenas_api_url }}/filesystem/setperm"
    method: POST
    headers:
      Authorization: "Bearer {{ truenas_api_key }}"
      Content-Type: "application/json"
    body_format: json
    body:
      path: "/mnt/{{ zfs_pool }}/logs/{{ item }}"
      mode: "755"
      user: "root"
      group: "monitor"
      options:
        stripacl: true
        recursive: false
    status_code: [200]
    validate_certs: "{{ truenas_validate_certs }}"
  loop: "{{ system_logs }}"
  register: system_log_permission_results
  tags:
    - datasets
    - permissions
    - system_log_permissions
    - api

- name: Display TrueNAS API dataset creation summary
  debug:
    msg:
      - "Dataset creation completed via TrueNAS API"
      - "Main datasets: {{ main_datasets | length }}"
      - "Container datasets: {{ container_datasets | length }}"
      - "Application datasets: {{ app_categories | dict2items | subelements('value') | length }}"
      - "Media datasets: {{ media_subdatasets | length }}"
      - "Download datasets: {{ download_subdatasets | length }}"
      - "Database datasets: {{ database_datasets | length }}"
      - "Backup datasets: {{ backup_subdatasets | length }}"
      - "Log datasets: {{ (all_services + system_logs) | length }}"
      - "System datasets: {{ system_datasets | length }}"
      - "Check TrueNAS Web UI > Storage > Pools to verify datasets"
  tags:
    - datasets
    - summary