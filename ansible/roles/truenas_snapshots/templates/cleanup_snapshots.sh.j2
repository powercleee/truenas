#!/bin/bash
# ZFS Snapshot Cleanup Script for TrueNAS SCALE
# Generated by Ansible on {{ ansible_date_time.iso8601 }}

set -euo pipefail

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() { echo -e "${GREEN}[INFO]${NC} $1"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }
log_section() { echo -e "${BLUE}=== $1 ===${NC}"; }

# Log to file
LOG_FILE="{{ sanoid_log_dir }}/cleanup_$(date +%Y%m%d_%H%M%S).log"
exec > >(tee -a "$LOG_FILE") 2>&1

log_section "Starting ZFS Snapshot Cleanup"

# Clean old snapshots based on retention policies
cleanup_old_snapshots() {
    local dataset=$1
    local retention_days=${2:-7}

    log_info "Cleaning snapshots older than $retention_days days for $dataset"

    # Find and destroy old snapshots
    zfs list -H -t snapshot -o name,creation -s creation | \
    grep "^$dataset@" | \
    while IFS=$'\t' read -r snapshot creation; do
        # Convert creation time to epoch
        creation_epoch=$(date -d "$creation" +%s)
        cutoff_epoch=$(date -d "$retention_days days ago" +%s)

        if [[ $creation_epoch -lt $cutoff_epoch ]]; then
            log_info "Destroying old snapshot: $snapshot"
            zfs destroy "$snapshot" || log_error "Failed to destroy $snapshot"
        fi
    done
}

# Cleanup functions for different dataset types
{% for dataset, config in sanoid_datasets.items() %}
cleanup_old_snapshots "{{ dataset }}" {{ sanoid_templates[config.use_template].daily | default(7) }}
{% endfor %}

log_section "Snapshot Cleanup Complete"