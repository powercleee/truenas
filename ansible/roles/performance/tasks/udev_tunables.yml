---
- name: UDEV Block Device Performance Tunables
  tags:
    - udev
    - performance
    - block-devices
  block:
    - name: Get existing UDEV tunables
      uri:
        url: "{{ truenas_api_url }}/tunable"
        method: GET
        headers:
          Authorization: "Bearer {{ truenas_api_key }}"
        status_code: [200]
        validate_certs: "{{ truenas_validate_certs }}"
      register: existing_tunables
      check_mode: false

    - name: Filter existing UDEV tunables for performance variables
      set_fact:
        existing_udev_performance_tunables: >-
          {{
            existing_tunables.json |
            selectattr('type', 'equalto', 'UDEV') |
            selectattr('var', 'in', performance_udev_tunables | map(attribute='var') | list) |
            list
          }}

    - name: Delete existing performance UDEV tunables
      uri:
        url: "{{ truenas_api_url }}/tunable/{{ item.id }}"
        method: DELETE
        headers:
          Authorization: "Bearer {{ truenas_api_key }}"
        status_code: [200]
        validate_certs: "{{ truenas_validate_certs }}"
      loop: "{{ existing_udev_performance_tunables }}"
      when:
        - performance_delete_existing | default(true)
        - existing_udev_performance_tunables | length > 0
      loop_control:
        label: "{{ item.var }} (ID: {{ item.id }})"

    - name: Create/update UDEV performance tunables
      uri:
        url: "{{ truenas_api_url }}/tunable"
        method: POST
        headers:
          Authorization: "Bearer {{ truenas_api_key }}"
          Content-Type: "application/json"
        body_format: json
        body:
          type: "UDEV"
          var: "{{ item.var }}"
          value: "{{ item.value }}"
          enabled: true
          comment: "{{ item.comment | default('UDEV performance tunable managed by Ansible') }}"
        status_code: [200, 201]
        validate_certs: "{{ truenas_validate_certs }}"
      loop: "{{ performance_udev_tunables }}"
      loop_control:
        label: "{{ item.var }}"
      register: udev_results

    - name: Display UDEV configuration results
      debug:
        msg:
          - "UDEV tunables configured: {{ udev_results.results | selectattr('status', 'in', [200, 201]) | list | length }}"
          - "Failed configurations: {{ udev_results.results | rejectattr('status', 'in', [200, 201]) | list | length }}"
          - "UDEV rules created:"
          - "{{ performance_udev_tunables | map(attribute='var') | map('regex_replace', '^(.*)$', '  â€¢ \\1.rules') | list }}"

    - name: Fail if any UDEV tunables failed to configure
      fail:
        msg: "Failed to configure UDEV tunable: {{ item.item.var }}"
      loop: "{{ udev_results.results }}"
      when: item.status not in [200, 201]
      loop_control:
        label: "{{ item.item.var }}"

  rescue:
    - name: Handle UDEV configuration errors
      debug:
        msg:
          - "Error configuring UDEV tunables:"
          - "{{ ansible_failed_result.msg | default('Unknown error') }}"

    - name: Re-raise UDEV error
      fail:
        msg: "UDEV tunable configuration failed: {{ ansible_failed_result.msg | default('Unknown error') }}"